package de.throsenheim.unlimited.stockeasilyapi.abstraction;

import de.throsenheim.unlimited.stockeasilyapi.common.logging.CommittedSqlCommand;
import org.slf4j.Logger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class SqlConnection {

    private final Class<?> modelClass;

    private final Connection connection;

    private final Logger logger;


    public SqlConnection(Connection connection, Class<?> modelClass, Logger logger) {
        this.connection = connection;
        this.modelClass = modelClass;
        this.logger = logger;
    }

    public void setAutoCommit(boolean autoCommit) {
        final String logAddendum = " auto-commit mode to " + autoCommit;
        try {
            connection.setAutoCommit(autoCommit);
            logger.debug("Set" + logAddendum);
        } catch (SQLException e) {
            logger.error("Could not set" + logAddendum);
            throw new RuntimeException(e);
        }
    }

    public void commit(CommittedSqlCommand sqlCommand) {
        final String logAddendum = ' ' + sqlCommand.getCommand() + ' ' + modelClass.getSimpleName();
        try {
            connection.commit();
            logger.trace("Committed" + logAddendum);
        } catch (SQLException e) {
            logger.error("Could not commit" + logAddendum);
            throw new RuntimeException(e);
        }
    }

    public PreparedStatement prepareStatement(final String sql) {
        return prepareStatement(sql, 0);
    }

    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) {
        final String logAddendum = " statement with SQL query '" + sql + '\'';
        try {
            return connection.prepareStatement(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            logger.error("Could not prepare" + logAddendum);
            throw new RuntimeException(e);
        }
    }
}
